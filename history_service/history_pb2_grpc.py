# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import history_pb2 as history__pb2


class HistoryStub(object):
    """The history service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddOrderHistory = channel.unary_unary(
                '/history.History/AddOrderHistory',
                request_serializer=history__pb2.AddOrderHistoryRequest.SerializeToString,
                response_deserializer=history__pb2.AddOrderHistoryReply.FromString,
                )
        self.CancelOrderHistory = channel.unary_unary(
                '/history.History/CancelOrderHistory',
                request_serializer=history__pb2.CancelOrderHistoryRequest.SerializeToString,
                response_deserializer=history__pb2.CancelOrderHistoryReply.FromString,
                )


class HistoryServicer(object):
    """The history service definition.
    """

    def AddOrderHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrderHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HistoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddOrderHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOrderHistory,
                    request_deserializer=history__pb2.AddOrderHistoryRequest.FromString,
                    response_serializer=history__pb2.AddOrderHistoryReply.SerializeToString,
            ),
            'CancelOrderHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrderHistory,
                    request_deserializer=history__pb2.CancelOrderHistoryRequest.FromString,
                    response_serializer=history__pb2.CancelOrderHistoryReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'history.History', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class History(object):
    """The history service definition.
    """

    @staticmethod
    def AddOrderHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/history.History/AddOrderHistory',
            history__pb2.AddOrderHistoryRequest.SerializeToString,
            history__pb2.AddOrderHistoryReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrderHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/history.History/CancelOrderHistory',
            history__pb2.CancelOrderHistoryRequest.SerializeToString,
            history__pb2.CancelOrderHistoryReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
