// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: merchant.proto

package merchant_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

var (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddLockedBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId      string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	MerchantName string `protobuf:"bytes,2,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	Amount       int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AddLockedBalanceRequest) Reset() {
	*x = AddLockedBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLockedBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLockedBalanceRequest) ProtoMessage() {}

func (x *AddLockedBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLockedBalanceRequest.ProtoReflect.Descriptor instead.
func (*AddLockedBalanceRequest) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{0}
}

func (x *AddLockedBalanceRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AddLockedBalanceRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *AddLockedBalanceRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type AddLockedBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddLockedBalanceReply) Reset() {
	*x = AddLockedBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLockedBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLockedBalanceReply) ProtoMessage() {}

func (x *AddLockedBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLockedBalanceReply.ProtoReflect.Descriptor instead.
func (*AddLockedBalanceReply) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{1}
}

func (x *AddLockedBalanceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddLockedBalanceReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ApproveLockedBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId      string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	MerchantName string `protobuf:"bytes,2,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	Amount       int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ApproveLockedBalanceRequest) Reset() {
	*x = ApproveLockedBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveLockedBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveLockedBalanceRequest) ProtoMessage() {}

func (x *ApproveLockedBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveLockedBalanceRequest.ProtoReflect.Descriptor instead.
func (*ApproveLockedBalanceRequest) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{2}
}

func (x *ApproveLockedBalanceRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ApproveLockedBalanceRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *ApproveLockedBalanceRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ApproveLockedBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ApproveLockedBalanceReply) Reset() {
	*x = ApproveLockedBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveLockedBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveLockedBalanceReply) ProtoMessage() {}

func (x *ApproveLockedBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveLockedBalanceReply.ProtoReflect.Descriptor instead.
func (*ApproveLockedBalanceReply) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{3}
}

func (x *ApproveLockedBalanceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ApproveLockedBalanceReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelAddLockedBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId      string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	MerchantName string `protobuf:"bytes,2,opt,name=merchantName,proto3" json:"merchantName,omitempty"`
	Amount       int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CancelAddLockedBalanceRequest) Reset() {
	*x = CancelAddLockedBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAddLockedBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAddLockedBalanceRequest) ProtoMessage() {}

func (x *CancelAddLockedBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAddLockedBalanceRequest.ProtoReflect.Descriptor instead.
func (*CancelAddLockedBalanceRequest) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{4}
}

func (x *CancelAddLockedBalanceRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CancelAddLockedBalanceRequest) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *CancelAddLockedBalanceRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CancelAddLockedBalanceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CancelAddLockedBalanceReply) Reset() {
	*x = CancelAddLockedBalanceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAddLockedBalanceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAddLockedBalanceReply) ProtoMessage() {}

func (x *CancelAddLockedBalanceReply) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAddLockedBalanceReply.ProtoReflect.Descriptor instead.
func (*CancelAddLockedBalanceReply) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{5}
}

func (x *CancelAddLockedBalanceReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelAddLockedBalanceReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_merchant_proto protoreflect.FileDescriptor

var file_merchant_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x15, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4f, 0x0a,
	0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x75,
	0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41,
	0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xb0, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x62, 0x0a,
	0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x68, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x64, 0x64,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x27, 0x5a, 0x12, 0x2e,
	0x3b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0xaa, 0x02, 0x10, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_merchant_proto_rawDescOnce sync.Once
	file_merchant_proto_rawDescData = file_merchant_proto_rawDesc
)

func file_merchant_proto_rawDescGZIP() []byte {
	file_merchant_proto_rawDescOnce.Do(func() {
		file_merchant_proto_rawDescData = protoimpl.X.CompressGZIP(file_merchant_proto_rawDescData)
	})
	return file_merchant_proto_rawDescData
}

var file_merchant_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_merchant_proto_goTypes = []interface{}{
	(*AddLockedBalanceRequest)(nil),       // 0: merchant.AddLockedBalanceRequest
	(*AddLockedBalanceReply)(nil),         // 1: merchant.AddLockedBalanceReply
	(*ApproveLockedBalanceRequest)(nil),   // 2: merchant.ApproveLockedBalanceRequest
	(*ApproveLockedBalanceReply)(nil),     // 3: merchant.ApproveLockedBalanceReply
	(*CancelAddLockedBalanceRequest)(nil), // 4: merchant.CancelAddLockedBalanceRequest
	(*CancelAddLockedBalanceReply)(nil),   // 5: merchant.CancelAddLockedBalanceReply
}
var file_merchant_proto_depIdxs = []int32{
	0, // 0: merchant.Merchant.AddLockedBalance:input_type -> merchant.AddLockedBalanceRequest
	2, // 1: merchant.Merchant.ApproveLockedBalance:input_type -> merchant.ApproveLockedBalanceRequest
	4, // 2: merchant.Merchant.CancelAddLockedBalance:input_type -> merchant.CancelAddLockedBalanceRequest
	1, // 3: merchant.Merchant.AddLockedBalance:output_type -> merchant.AddLockedBalanceReply
	3, // 4: merchant.Merchant.ApproveLockedBalance:output_type -> merchant.ApproveLockedBalanceReply
	5, // 5: merchant.Merchant.CancelAddLockedBalance:output_type -> merchant.CancelAddLockedBalanceReply
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_merchant_proto_init() }
func file_merchant_proto_init() {
	if File_merchant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_merchant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLockedBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLockedBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveLockedBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveLockedBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAddLockedBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAddLockedBalanceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_merchant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_merchant_proto_goTypes,
		DependencyIndexes: file_merchant_proto_depIdxs,
		MessageInfos:      file_merchant_proto_msgTypes,
	}.Build()
	File_merchant_proto = out.File
	file_merchant_proto_rawDesc = nil
	file_merchant_proto_goTypes = nil
	file_merchant_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MerchantClient is the client API for Merchant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantClient interface {
	AddLockedBalance(ctx context.Context, in *AddLockedBalanceRequest, opts ...grpc.CallOption) (*AddLockedBalanceReply, error)
	ApproveLockedBalance(ctx context.Context, in *ApproveLockedBalanceRequest, opts ...grpc.CallOption) (*ApproveLockedBalanceReply, error)
	CancelAddLockedBalance(ctx context.Context, in *CancelAddLockedBalanceRequest, opts ...grpc.CallOption) (*CancelAddLockedBalanceReply, error)
}

type merchantClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantClient(cc grpc.ClientConnInterface) MerchantClient {
	return &merchantClient{cc}
}

func (c *merchantClient) AddLockedBalance(ctx context.Context, in *AddLockedBalanceRequest, opts ...grpc.CallOption) (*AddLockedBalanceReply, error) {
	out := new(AddLockedBalanceReply)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/AddLockedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) ApproveLockedBalance(ctx context.Context, in *ApproveLockedBalanceRequest, opts ...grpc.CallOption) (*ApproveLockedBalanceReply, error) {
	out := new(ApproveLockedBalanceReply)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/ApproveLockedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantClient) CancelAddLockedBalance(ctx context.Context, in *CancelAddLockedBalanceRequest, opts ...grpc.CallOption) (*CancelAddLockedBalanceReply, error) {
	out := new(CancelAddLockedBalanceReply)
	err := c.cc.Invoke(ctx, "/merchant.Merchant/CancelAddLockedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServer is the server API for Merchant service.
type MerchantServer interface {
	AddLockedBalance(context.Context, *AddLockedBalanceRequest) (*AddLockedBalanceReply, error)
	ApproveLockedBalance(context.Context, *ApproveLockedBalanceRequest) (*ApproveLockedBalanceReply, error)
	CancelAddLockedBalance(context.Context, *CancelAddLockedBalanceRequest) (*CancelAddLockedBalanceReply, error)
}

// UnimplementedMerchantServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServer struct {
}

func (*UnimplementedMerchantServer) AddLockedBalance(context.Context, *AddLockedBalanceRequest) (*AddLockedBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLockedBalance not implemented")
}
func (*UnimplementedMerchantServer) ApproveLockedBalance(context.Context, *ApproveLockedBalanceRequest) (*ApproveLockedBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLockedBalance not implemented")
}
func (*UnimplementedMerchantServer) CancelAddLockedBalance(context.Context, *CancelAddLockedBalanceRequest) (*CancelAddLockedBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAddLockedBalance not implemented")
}

func RegisterMerchantServer(s *grpc.Server, srv MerchantServer) {
	s.RegisterService(&_Merchant_serviceDesc, srv)
}

func _Merchant_AddLockedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLockedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).AddLockedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/AddLockedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).AddLockedBalance(ctx, req.(*AddLockedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_ApproveLockedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLockedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).ApproveLockedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/ApproveLockedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).ApproveLockedBalance(ctx, req.(*ApproveLockedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merchant_CancelAddLockedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAddLockedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServer).CancelAddLockedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/merchant.Merchant/CancelAddLockedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServer).CancelAddLockedBalance(ctx, req.(*CancelAddLockedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Merchant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.Merchant",
	HandlerType: (*MerchantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLockedBalance",
			Handler:    _Merchant_AddLockedBalance_Handler,
		},
		{
			MethodName: "ApproveLockedBalance",
			Handler:    _Merchant_ApproveLockedBalance_Handler,
		},
		{
			MethodName: "CancelAddLockedBalance",
			Handler:    _Merchant_CancelAddLockedBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
